/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { User } from "../../user/base/User";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumEntityEntityStatus } from "./EnumEntityEntityStatus";
import { EnumEntityEntityType } from "./EnumEntityEntityType";

@ObjectType()
class Entity {
  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  accountOwner?: User;

  @ApiProperty({
    required: false,
    type: () => [Entity],
  })
  @ValidateNested()
  @Type(() => Entity)
  @IsOptional()
  childEntities?: Array<Entity>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  entityAccountContact?: User;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  entityAccountsPayableEmail!: string | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  entityBillingContact?: User | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  entityName!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumEntityEntityStatus,
  })
  @IsEnum(EnumEntityEntityStatus)
  @Field(() => EnumEntityEntityStatus, {
    nullable: true,
  })
  entityStatus?: "Active" | "Suspended" | "Disabled" | "Lead";

  @ApiProperty({
    required: true,
    enum: EnumEntityEntityType,
  })
  @IsEnum(EnumEntityEntityType)
  @Field(() => EnumEntityEntityType, {
    nullable: true,
  })
  entityType?:
    | "GeopathVendor"
    | "GeopathPartner"
    | "MemberMediaOperator"
    | "MemberAgency"
    | "GeopathInternal";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  entityWebsite!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Entity,
  })
  @ValidateNested()
  @Type(() => Entity)
  @IsOptional()
  parentEntity?: Entity | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  remoteAccountingId!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Entity as Entity };
